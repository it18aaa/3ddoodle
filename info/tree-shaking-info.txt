// look in here for classes

// import "@babylonjs/core/Culling/ray";
// import "@babylonjs/core/Lights/Shadows/shadowGeneratorSceneComponent";
// import "@babylonjs/core/Materials/standardMaterial";
// import "@babylonjs/core/Layers/effectLayerSceneComponent";
// import "@babylonjs/loaders";
// import "@babylonjs/core/Loading/loadingScreen";
// import { HighlightLayer } from "@babylonjs/core/Layers/highlightLayer";
// import { UtilityLayerRenderer } from "@babylonjs/core/Rendering/utilityLayerRenderer";

// import { Mesh } from "@babylonjs/core/Meshes/mesh"
// import { PointerEventTypes } from "@babylonjs/core/Events/pointerEvents";
// import { Color3 } from "@babylonjs/core/Maths/math.color";
// //import { PointerDragBehavior } from "@babylonjs/core/Behaviors/Meshes/pointerDragBehavior";
// import { VertexBuffer } from "@babylonjs/core/meshes"

//import { PlaneRotationGizmo } from "@babylonjs/core/Gizmos/planeRotationGizmo";
// import { Vector2 } from "@babylonjs/core/Maths/math";
// import * as EarcutRef from "earcut";
// import { Camera } from "@babylonjs/core/Cameras/camera";
// import { StandardMaterial } from "@babylonjs/core/Materials/standardMaterial";
// import { animateCameraTo } from './modules/utility/animateCameraTo'








export const createScene = function (engine) {
  // create a basic BJS Scene object
  const scene = new Scene(engine);

  // create a built in sphere shape
  const sphere = MeshBuilder.CreateSphere(
    "sphere",
    {
      segments: 64,
      diameter: 2,
    },
    scene
  );

  const cube = MeshBuilder.CreateBox(
    "box",
    {
      size: 4,
    },
    scene
  );

  cube.position.x = 3;
  cube.position.z = 4;
  cube.position.y = 2;

  const box = [];
  for (let i = 0; i < 20; i++) {
    box[i] = MeshBuilder.CreateBox(
      `box${i}`,
      { width: 0.6, depth: 0.6, height: 0.03 },
      scene
    );

    box[i].position.x = -3;
    box[i].position.z = i * 1;
    box[i].position.y = 0.02;
  }

  // Move the sphere upward 1/2 of its height
  sphere.position.y = 1;

  // create a built in ground shape
  const ground = MeshBuilder.CreateGround(
    "ground1",
    {
      height: 50,
      width: 50,
      subdivisions: 20,
    },
    scene
  );

  const boxMaterial = new StandardMaterial("boxMaterial", scene);
  boxMaterial.diffuseColor = new Color3(0.3, 0.2, 0.0);
  boxMaterial.specularColor = new Color3(1, 0, 0);
  //boxMaterial.emissiveColor = new Color3(.1,.1,.1);
  boxMaterial.ambientColor = new Color3(0.23, 0.98, 0.53);

  const gridMaterial = new GridMaterial("gridMaterial", scene);
  gridMaterial.lineColor = new Color3(0.3, 0.6, 0.4);
  gridMaterial.mainColor = new Color3(0.6, 0.9, 0.8);
  gridMaterial.minorUnitVisibility = 0.25;
  gridMaterial.majorUnitFrequency = 5;

  //   ground.material = gridMaterial;

  scene.clearColor = new Color3(0.7, 0.85, 1);

  const light = new HemisphericLight(
    "hemiLight",
    new Vector3(-11, 15, 0),
    scene
  );

  light.intensity = 0.1;

  const dlight = new DirectionalLight(
    "DirectionalLight",
    new Vector3(0, -20, 0),
    scene
  );
  dlight.intensity = 0.8;

  // shadows
  const shadowGenerator = new ShadowGenerator(512, dlight);
  shadowGenerator.addShadowCaster(sphere);
  shadowGenerator.addShadowCaster(cube);

  box.forEach((b) => {
    shadowGenerator.addShadowCaster(b);
    b.receiveShadows = true;
  });

  ground.receiveShadows = true;
  sphere.receiveShadows = true;
  cube.receiveShadows = true;
  gridMaterial.receiveShadows = true;

  shadowGenerator.usePercentageCloserFiltering = true;

  const grassMaterial = new StandardMaterial("grassMaterial", scene);
  const grassTexture = new GrassProceduralTexture("grassTexture", 256, scene);
  grassMaterial.diffuseTexture = grassTexture;
  grassMaterial.diffuseTexture.uScale = 10;
  grassMaterial.diffuseTexture.vScale = 10;
  grassMaterial.specularColor = new Color3(0.2, 0.2, 0.2);

  // grassMaterial.ambientTexture.
  ground.material = grassMaterial;

  const myMaterial = new StandardMaterial("myMaterial", scene);
  myMaterial.diffuseTexture = new Texture("/img/grass006.jpg");

  const woodenFenceMaterial = new StandardMaterial("woodenFenceMaterial", scene);
  woodenFenceMaterial.diffuseText = new Texture("/img/wood.jpg")

  woodenFenceMaterial.diffuseTexture.uScale = 20;
  woodenFenceMaterial.diffuseTexture.vScale = 20;


  ground.material = myMaterial;
  myMaterial.diffuseTexture.uScale = 20;
  myMaterial.diffuseTexture.vScale = 20;
  myMaterial.specularColor = new Color3(0.2, 0.2, 0.2);

  // sphere.material = grassMaterial;
  cube.material = boxMaterial;

  SceneLoader.ImportMesh(
    ["monkey1"],
    "./",
    "monkey2.babylon",
    scene,
    (meshes) => {
      meshes[0].position.x = 5;
      meshes[0].position.z = -10;
      shadowGenerator.addShadowCaster(meshes[0])
    }
  );


  SceneLoader.ImportMesh(
    ["pavillion"],
    "./",
    "pav.babylon",
    scene,
    (meshes) => {
      meshes[0].position.x = -7;
      meshes[0].position.z = -10;
      meshes[0].scaling = new Vector3(.2, .2, .2);
      shadowGenerator.addShadowCaster(meshes[0])
    }
  );

  return scene;
};

export const createAltScene = function (engine) {
  const scene = new Scene(engine);




  // create a built in ground shape
  const ground = MeshBuilder.CreateGround(
    "ground1",
    {
      height: 50,
      width: 50,
      subdivisions: 20,
    },
    scene
  );

  const gridMaterial = new GridMaterial("gridMaterial", scene);
  gridMaterial.lineColor = new Color3(0.3, 0.6, 0.4);
  gridMaterial.mainColor = new Color3(0.6, 0.9, 0.8);
  gridMaterial.minorUnitVisibility = 0.25;
  gridMaterial.majorUnitFrequency = 5;

  ground.material = gridMaterial;

  return scene;
};
